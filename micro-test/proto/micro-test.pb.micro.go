// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/micro-test.proto

package microtest

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	//api "github.com/micro/micro/v3/service/api"
	//client "github.com/micro/micro/v3/service/client"
	//server "github.com/micro/micro/v3/service/server"

	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MicroTest service

func NewMicroTestEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MicroTest service

type MicroTestService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroTest_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (MicroTest_PingPongService, error)
}

type microTestService struct {
	c    client.Client
	name string
}

func NewMicroTestService(name string, c client.Client) MicroTestService {
	return &microTestService{
		c:    c,
		name: name,
	}
}

func (c *microTestService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MicroTest.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microTestService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroTest_StreamService, error) {
	req := c.c.NewRequest(c.name, "MicroTest.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &microTestServiceStream{stream}, nil
}

type MicroTest_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type microTestServiceStream struct {
	stream client.Stream
}

func (x *microTestServiceStream) Close() error {
	return x.stream.Close()
}

func (x *microTestServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microTestServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microTestServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microTestServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microTestService) PingPong(ctx context.Context, opts ...client.CallOption) (MicroTest_PingPongService, error) {
	req := c.c.NewRequest(c.name, "MicroTest.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &microTestServicePingPong{stream}, nil
}

type MicroTest_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type microTestServicePingPong struct {
	stream client.Stream
}

func (x *microTestServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *microTestServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *microTestServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microTestServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microTestServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *microTestServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MicroTest service

type MicroTestHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, MicroTest_StreamStream) error
	PingPong(context.Context, MicroTest_PingPongStream) error
}

func RegisterMicroTestHandler(s server.Server, hdlr MicroTestHandler, opts ...server.HandlerOption) error {
	type microTest interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type MicroTest struct {
		microTest
	}
	h := &microTestHandler{hdlr}
	return s.Handle(s.NewHandler(&MicroTest{h}, opts...))
}

type microTestHandler struct {
	MicroTestHandler
}

func (h *microTestHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.MicroTestHandler.Call(ctx, in, out)
}

func (h *microTestHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MicroTestHandler.Stream(ctx, m, &microTestStreamStream{stream})
}

type MicroTest_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type microTestStreamStream struct {
	stream server.Stream
}

func (x *microTestStreamStream) Close() error {
	return x.stream.Close()
}

func (x *microTestStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microTestStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microTestStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microTestStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *microTestHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.MicroTestHandler.PingPong(ctx, &microTestPingPongStream{stream})
}

type MicroTest_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type microTestPingPongStream struct {
	stream server.Stream
}

func (x *microTestPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *microTestPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microTestPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microTestPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microTestPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *microTestPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
